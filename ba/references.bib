@inbook{Ehrig2001,
  author    = {Ehrig, Hartmut
               and Mahr, Bernd
               and Gro{\ss}e-Rhode, Martin
               and Cornlius, Felix
               and Zeitz, Philip},
  title     = {Mathematisch-strukturelle Grundlagen der Informatik},
  booktitle = {Mathematisch-strukturelle Grundlagen der Informatik},
  year      = {2001},
  chapter   = {{\"A}quivalenzrelationen},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {93--107},
  abstract  = {{\"A}quivalenzrelationen sind ein sehr m{\"a}chtiges Hilfsmittel f{\"u}r Klassifikation und Abstraktion in der Mathematik und speziell der mathematischen Informatik. Dies zeigt sich vor allem in dem Begriff der {\"A}quivalenzklassen, den wir in Abschnitt 5.4 einf{\"u}hren. Zuvor behandeln wir im Anschlu{\ss} an die konzeptuelle Einleitung zun{\"a}chst die zentrale Definition der {\"A}quivalenzrelation selbst und die Konstruktion der Abschlu{\ss}bildung. Dahinter verbirgt sich die minimale Erg{\"a}nzung einer beliebigen Relation zu einer {\"A}quivalenzrelation, die diese enth{\"a}lt. Da{\ss} dies immer eindeutig moglich ist, ist ein wichtiges Ergebnis.},
  isbn      = {978-3-642-56792-6},
  doi       = {10.1007/978-3-642-56792-6_6},
  url       = {https://doi.org/10.1007/978-3-642-56792-6_6}
}

@article{2021-egg,
  author     = {Willsey, Max and Nandi, Chandrakana and Wang, Yisu Remy and Flatt, Oliver and Tatlock, Zachary and Panchekha, Pavel},
  title      = {egg: Fast and Extensible Equality Saturation},
  year       = {2021},
  issue_date = {January 2021},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {5},
  number     = {POPL},
  url        = {https://doi.org/10.1145/3434304},
  doi        = {10.1145/3434304},
  abstract   = {An e-graph efficiently represents a congruence relation over many expressions. Although they were originally developed in the late 1970s for use in automated theorem provers, a more recent technique known as equality saturation repurposes e-graphs to implement state-of-the-art, rewrite-driven compiler optimizations and program synthesizers. However, e-graphs remain unspecialized for this newer use case. Equality saturation workloads exhibit distinct characteristics and often require ad-hoc e-graph extensions to incorporate transformations beyond purely syntactic rewrites.  This work contributes two techniques that make e-graphs fast and extensible, specializing them to equality saturation. A new amortized invariant restoration technique called rebuilding takes advantage of equality saturation's distinct workload, providing asymptotic speedups over current techniques in practice. A general mechanism called e-class analyses integrates domain-specific analyses into the e-graph, reducing the need for ad hoc manipulation.  We implemented these techniques in a new open-source library called egg. Our case studies on three previously published applications of equality saturation highlight how egg's performance and flexibility enable state-of-the-art results across diverse domains.},
  journal    = {Proc. ACM Program. Lang.},
  month      = jan,
  articleno  = {23},
  numpages   = {29},
  keywords   = {equality saturation, e-graphs}
}

@inproceedings{phaseorder-2009,
  author    = {Tate, Ross and Stepp, Michael and Tatlock, Zachary and Lerner, Sorin},
  title     = {Equality saturation: a new approach to optimization},
  year      = {2009},
  isbn      = {9781605583792},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/1480881.1480915},
  doi       = {10.1145/1480881.1480915},
  abstract  = {Optimizations in a traditional compiler are applied sequentially, with each optimization destructively modifying the program to produce a transformed program that is then passed to the next optimization. We present a new approach for structuring the optimization phase of a compiler. In our approach, optimizations take the form of equality analyses that add equality information to a common intermediate representation. The optimizer works by repeatedly applying these analyses to infer equivalences between program fragments, thus saturating the intermediate representation with equalities. Once saturated, the intermediate representation encodes multiple optimized versions of the input program. At this point, a profitability heuristic picks the final optimized program from the various programs represented in the saturated representation. Our proposed way of structuring optimizers has a variety of benefits over previous approaches: our approach obviates the need to worry about optimization ordering, enables the use of a global optimization heuristic that selects among fully optimized programs, and can be used to perform translation validation, even on compilers other than our own. We present our approach, formalize it, and describe our choice of intermediate representation. We also present experimental results showing that our approach is practical in terms of time and space overhead, is effective at discovering intricate optimization opportunities, and is effective at performing translation validation for a realistic optimizer.},
  booktitle = {Proceedings of the 36th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  pages     = {264â€“276},
  numpages  = {13},
  keywords  = {intermediate representation, equality reasoning, compiler optimization},
  location  = {Savannah, GA, USA},
  series    = {POPL '09}
}

@misc{cranelift,
  author = {Bytecode Alliance, NPO},
  title  = {Cranelift},
  url    = {https://cranelift.dev/},
  note   = {besucht am 23.11.2024}
}

@misc{devito,
  author = {Zachary DeVito},
  title  = {Intro to EGraphs},
  url    = {https://colab.research.google.com/drive/1tNOQijJqe5tw-Pk9iqd6HHb2abC5aRid?usp=sharing},
  note   = {besucht am 26.11.2024}
}